# Git automation script for cluster analysis pipeline
# Stages generated results, creates structured commit messages, and tracks iterations

param(
    [string]$Message = "",
    [string]$IterationType = "experiment",
    [string[]]$IncludePatterns = @("*.json", "*.md", "*.csv", "*.geojson", "*.png", "*.gif"),
    [string[]]$ExcludePatterns = @("*.log", "*.tmp", "temp/*", "logs/*"),
    [switch]$Tag,
    [string]$TagMessage = "",
    [switch]$Force,
    [switch]$DryRun
)

# Function to get git status
function Get-GitStatus {
    try {
        $status = git status --porcelain 2>$null
        return $status
    }
    catch {
        Write-Host "Error getting git status: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Function to stage files based on patterns
function Stage-Files {
    param(
        [string[]]$IncludePatterns,
        [string[]]$ExcludePatterns
    )
    
    $stagedCount = 0
    
    foreach ($pattern in $IncludePatterns) {
        try {
            # Find files matching the pattern
            $files = Get-ChildItem -Recurse -Include $pattern | Where-Object {
                # Check if file should be excluded
                $shouldExclude = $false
                foreach ($excludePattern in $ExcludePatterns) {
                    if ($_.FullName -like "*$excludePattern*") {
                        $shouldExclude = $true
                        break
                    }
                }
                return -not $shouldExclude
            }
            
            # Stage each file
            foreach ($file in $files) {
                $relativePath = $file.FullName.Replace((Get-Location).Path + "\", "").Replace("\", "/")
                git add $relativePath 2>$null
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "Staged: $relativePath" -ForegroundColor Green
                    $stagedCount++
                }
            }
        }
        catch {
            Write-Host "Error staging files with pattern $pattern : $($_.Exception.Message)" -ForegroundColor Yellow
        }
    }
    
    return $stagedCount
}

# Function to generate commit message
function Generate-CommitMessage {
    param(
        [string]$IterationType,
        [string]$CustomMessage
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    # Get staged files info
    $stagedFiles = git diff --cached --name-only 2>$null
    $fileCount = if ($stagedFiles) { $stagedFiles.Count } else { 0 }
    
    # Get current branch
    $branch = git branch --show-current 2>$null
    if (-not $branch) { $branch = "unknown" }
    
    # Base commit message structure
    $commitMessage = @"
[$IterationType] $(if ($CustomMessage) { $CustomMessage } else { "Cluster analysis iteration" }) - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

Branch: $branch
Files staged: $fileCount
Iteration type: $IterationType

"@
    
    # Add file summary if available
    if ($stagedFiles) {
        $commitMessage += "`nFiles modified:`n"
        foreach ($file in $stagedFiles) {
            $commitMessage += "  - $file`n"
        }
    }
    
    # Add metadata
    $commitMessage += @"

Generated by cluster analysis pipeline
Timestamp: $timestamp
"@
    
    return $commitMessage
}

# Function to create git tag
function New-GitTag {
    param(
        [string]$TagMessage,
        [switch]$Force
    )
    
    $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
    $tagName = "iteration-$timestamp"
    
    try {
        if ($Force) {
            git tag -f $tagName -m $TagMessage 2>$null
        } else {
            git tag $tagName -m $TagMessage 2>$null
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "Created tag: $tagName" -ForegroundColor Green
            return $tagName
        } else {
            Write-Host "Failed to create tag" -ForegroundColor Red
            return $null
        }
    }
    catch {
        Write-Host "Error creating tag: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Function to update paths.txt
function Update-PathsFile {
    try {
        Write-Host "Updating paths.txt..." -ForegroundColor Yellow
        & ".\scripts\dir.bat" 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "paths.txt updated successfully" -ForegroundColor Green
            return $true
        } else {
            Write-Host "Warning: Could not update paths.txt" -ForegroundColor Yellow
            return $false
        }
    }
    catch {
        Write-Host "Warning: Could not run dir.bat to update paths.txt" -ForegroundColor Yellow
        return $false
    }
}

# Function to get metrics from results
function Get-ResultsMetrics {
    $metrics = @{
        'total_rules' = 0
        'total_clusters' = 0
        'successful_rules' = 0
    }
    
    try {
        # Look for run manifest files
        $manifestFiles = Get-ChildItem -Path "data/output" -Filter "run_manifest_*.json" -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if ($manifestFiles) {
            $manifestContent = Get-Content $manifestFiles.FullName | ConvertFrom-Json
            $metrics['total_rules'] = $manifestContent.statistics.total_rules
            $metrics['total_clusters'] = $manifestContent.statistics.total_clusters
            $metrics['successful_rules'] = $manifestContent.statistics.successful_rules
        }
    }
    catch {
        Write-Host "Could not extract metrics from results" -ForegroundColor Yellow
    }
    
    return $metrics
}

# Main execution
try {
    Write-Host "=== Git Iteration Commit Tool ===" -ForegroundColor Green
    Write-Host "Starting git commit process..." -ForegroundColor Yellow
    
    # Check if we're in a git repository
    $gitRoot = git rev-parse --show-toplevel 2>$null
    if (-not $gitRoot) {
        Write-Host "Error: Not in a git repository" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "Git repository: $gitRoot" -ForegroundColor Green
    
    # Update paths.txt before committing
    Update-PathsFile
    
    # Get current git status
    Write-Host "`nChecking git status..." -ForegroundColor Cyan
    $gitStatus = Get-GitStatus
    if (-not $gitStatus) {
        Write-Host "No changes detected or git error" -ForegroundColor Yellow
        exit 0
    }
    
    Write-Host "Git status:" -ForegroundColor Gray
    Write-Host $gitStatus -ForegroundColor Gray
    
    # Stage files based on patterns
    Write-Host "`nStaging files..." -ForegroundColor Cyan
    $stagedCount = Stage-Files -IncludePatterns $IncludePatterns -ExcludePatterns $ExcludePatterns
    
    if ($stagedCount -eq 0) {
        Write-Host "No files staged for commit" -ForegroundColor Yellow
        exit 0
    }
    
    Write-Host "Staged $stagedCount files" -ForegroundColor Green
    
    # Get metrics for commit message
    $metrics = Get-ResultsMetrics
    
    # Generate commit message
    $commitMessage = Generate-CommitMessage -IterationType $IterationType -CustomMessage $Message
    
    # Add metrics to commit message if available
    if ($metrics.total_rules -gt 0) {
        $commitMessage += "`n`nMetrics:`n"
        $commitMessage += "  Rules processed: $($metrics.successful_rules)/$($metrics.total_rules)`n"
        $commitMessage += "  Total clusters: $($metrics.total_clusters)`n"
    }
    
    # Show commit message
    Write-Host "`nCommit message:" -ForegroundColor Cyan
    Write-Host $commitMessage -ForegroundColor White
    
    if ($DryRun) {
        Write-Host "`nDry run mode - no commit will be made" -ForegroundColor Yellow
        exit 0
    }
    
    # Confirm commit
    $response = Read-Host "`nProceed with commit? (y/n)"
    if ($response -ne 'y' -and $response -ne 'Y') {
        Write-Host "Commit cancelled" -ForegroundColor Yellow
        exit 0
    }
    
    # Perform commit
    Write-Host "`nCommitting changes..." -ForegroundColor Cyan
    git commit -m $commitMessage
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Commit successful!" -ForegroundColor Green
        
        # Create tag if requested
        if ($Tag) {
            Write-Host "`nCreating tag..." -ForegroundColor Cyan
            $tagName = New-GitTag -TagMessage $TagMessage -Force:$Force
            if ($tagName) {
                Write-Host "Tag created: $tagName" -ForegroundColor Green
            }
        }
        
        # Show commit info
        $commitHash = git rev-parse HEAD 2>$null
        if ($commitHash) {
            Write-Host "`nCommit hash: $commitHash" -ForegroundColor Gray
        }
        
        Write-Host "`nIteration committed successfully!" -ForegroundColor Green
        
    } else {
        Write-Host "Commit failed" -ForegroundColor Red
        exit 1
    }
    
}
catch {
    Write-Host "`nGit automation failed: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
finally {
    # Clean up any temporary files if needed
}
