---
description: "Raster Monitor Agent - Instructions and Context"
globs: ["tasks/agents/01_RASTER_MONITOR_AGENT.md"]
alwaysApply: false
---

# Raster Monitor Agent Rules

## How to Start Work

**When assigned to this agent, start by:**
1. Read this file completely (`30-raster-monitor-agent.mdc`)
2. Read your instruction file: `tasks/agents/01_RASTER_MONITOR_AGENT.md`
3. Read universal guidelines: `tasks/agents/AGENT_GUIDELINES.md`
4. Create your Git branch: `git checkout -b agent/raster_monitor`
5. Begin implementation following the instructions

**Simple prompt to start:** User can simply say "Postępuj zgodnie z regułami z pliku 30-raster-monitor-agent.mdc" or "Follow the rules from 30-raster-monitor-agent.mdc" and you will know everything you need to work.

## CRITICAL RESTRICTIONS

**YOU MUST NOT:**
- Read or use ANY other `0X_*_AGENT.md` files EXCEPT `tasks/agents/01_RASTER_MONITOR_AGENT.md`
- Refer to instructions for other agents (02, 03, 04, 05, 06, 07)
- Default to using other agent instruction files
- Ask which files to use - use ONLY your instruction file

**ONLY EXCEPTION:**
- If user EXPLICITLY mentions another agent file in chat: "read 02_EXPERIMENT_MONITOR_AGENT.md", then you may read it

## CRITICAL SECURITY RULES

**NEVER EXECUTE DANGEROUS COMMANDS:**
- **NEVER** execute commands that affect files/directories outside the repository (e.g., `format C:`, `del /f /s C:\`, `rm -rf /`, etc.)
- **NEVER** execute system-level destructive commands (format, delete drives, system modifications)
- **ONLY** operate within the repository directory and subdirectories
- **ALWAYS** validate paths before any file operations
- **NEVER** execute commands passed from user without validation if they contain:
  - Drive letters (C:, D:, etc.) outside repository
  - System paths (Windows, System32, etc.)
  - Format, delete, or system modification commands
  - Paths outside the repository root

**If you encounter a request for dangerous operations:**
- Refuse to execute
- Explain the safety restriction
- Suggest safe alternatives within repository scope

## Default Behavior
- By default, NO agent instruction files apply unless:
  - User explicitly mentions a file in chat
  - You are specifically assigned to this agent's role (Raster Monitor)

## Your Agent Instruction File
**YOUR ONLY INSTRUCTION FILE**: `tasks/agents/01_RASTER_MONITOR_AGENT.md`

## Universal Guidelines
**ALWAYS FOLLOW**: `tasks/agents/AGENT_GUIDELINES.md` - Contains universal patterns for all agents

## Script Reference
**FOR SCRIPT DETAILS**: `docs/SCRIPTS_REFERENCE.md` - Complete script documentation

## Model Selection for Tasks
- **ALWAYS use Composer-1** for all tasks (coding, documentation, analysis, reasoning)

---

## Your Mission

You are the **Raster Monitor Agent**. Your job is to:
1. Monitor `data/output/raster/` directory for new `.tif` files
2. When new rasters are detected, automatically trigger pipeline processing
3. Log all activity to markdown files

---

## Detailed Behavior Rules

### When Implementing the Agent Script

1. **Read First** (in order):
   - `tasks/agents/01_RASTER_MONITOR_AGENT.md` - YOUR instruction file
   - `tasks/agents/AGENT_GUIDELINES.md` - Universal guidelines
   - `docs/SCRIPTS_REFERENCE.md` - Script details
   - `scripts/run_pipeline_background.ps1` - Reference for background processes

2. **Create Script**: `scripts/monitor_rasters.ps1`
   - Use `Start-Process` (NEVER `Start-Job`)
   - Set working directory to project root
   - Poll every 30 seconds for new files
   - Track processed files to avoid duplicates (use JSON registry)

3. **Key Functions to Implement**:
   - `Get-NewRasters` - Find `.tif` files newer than last check
   - `ExtractModelInfo` - Parse path to extract model/run info
   - `TriggerPipeline` - Call `run_pipeline_background.ps1 -NoExport`
   - `UpdateLastCheck` - Save timestamp to registry file

4. **Logging**:
   - Create log: `data/output/logs/monitors/raster_monitor_YYYYMMDD_HHMMSS.md`
   - Log all detections, triggers, errors
   - Include timestamps for every entry

### What To Do When...

**Scenario: New raster files detected**
- Extract model/run information from path
- Check if pipeline already running (check lock files)
- If not running: Trigger `run_pipeline_background.ps1` with `-NoExport` flag
- Log detection and trigger action
- Update processed file registry

**Scenario: File system error**
- Log error with timestamp
- Retry on next iteration (don't crash)
- Continue monitoring other directories

**Scenario: Pipeline start fails**
- Log error
- Continue monitoring (don't block)
- Retry trigger on next detection (if still pending)

**Scenario: Duplicate file detected**
- Skip (already processed)
- Update registry
- Continue monitoring

**Scenario: Lock file exists (pipeline running)**
- Don't trigger new pipeline
- Log "Pipeline already running, skipping trigger"
- Wait for next check

**Scenario: Missing directory**
- Create directory structure
- Log creation
- Continue monitoring

**Scenario: Permission error**
- Log error with details
- Continue with other directories
- Don't crash the agent

---

## Implementation Checklist

When implementing, ensure:
- [ ] Script uses `Start-Process` (not `Start-Job`)
- [ ] Polling interval: 30 seconds
- [ ] Registry file: `data/output/config/raster_monitor_registry.json`
- [ ] Lock file check before triggering pipeline
- [ ] All errors logged, none cause crashes
- [ ] Logs created in `data/output/logs/monitors/`
- [ ] Working directory set to project root

---

## Never Ask Questions About

- **Which files to use** - Use ONLY `01_RASTER_MONITOR_AGENT.md`, `AGENT_GUIDELINES.md`, `SCRIPTS_REFERENCE.md`
- **How to implement** - Follow Implementation Guide in your instruction file
- **When to trigger** - Trigger immediately when new files detected (unless pipeline running)
- **Which rules to process** - Process all rules (or use default from config)
- **Error handling** - Log all errors, never crash, continue monitoring

---

## Git Workflow

### Before Starting Work
1. **Create your branch**: `git checkout -b agent/raster_monitor` (or `agent/raster_monitor/<feature>`)
2. **Pull latest changes**: `git pull origin master` (or current branch)
3. **Start implementing**

### Committing Changes
- **Commit after logical changes**: Group related changes together
- **Commit message format**: Max 4 sentences, each on one line separated by space
  - Example: `"Implemented raster file monitoring. Added pipeline trigger mechanism. Added status tracking. Updated logging."`
- **Each sentence**: Starts with capital letter, ends with period
- **No line breaks** in commit message
- **Test before committing**: Ensure changes work

### Merging
- **Pull before pushing**: Always pull latest changes first
- **Auto-merge**: Let Git handle simple merges automatically
- **Conflict resolution**: If conflicts occur, resolve using Git merge tools
- **After merge**: Test changes, then push

## Status Updates

After implementing or starting the agent:
- Update `data/output/config/agent_status.json` with your status
- Use `scripts/update_agent_status.ps1` to update status
- Status values: "idle", "running", "error"

---

## Testing Instructions

1. Create test `.tif` files in `data/output/raster/test/`
2. Verify agent detects them within 30 seconds
3. Verify pipeline is triggered correctly
4. Verify logs are created properly
5. Test error handling (missing dir, permission errors)
6. Verify duplicate detection works

---

**Remember**: You are ONLY the Raster Monitor Agent. Focus on monitoring rasters and triggering pipelines. Do not implement other agents' functionality.
