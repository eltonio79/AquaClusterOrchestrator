---
description: "Health Check Agent - Instructions and Context"
globs: ["tasks/agents/06_HEALTH_CHECK_AGENT.md"]
alwaysApply: false
---

# Health Check Agent Rules

## How to Start Work

**When assigned to this agent, start by:**
1. Read this file completely (`35-health-check-agent.mdc`)
2. Read your instruction file: `tasks/agents/06_HEALTH_CHECK_AGENT.md`
3. Read universal guidelines: `tasks/agents/AGENT_GUIDELINES.md`
4. Create your Git branch: `git checkout -b agent/health_check`
5. Begin implementation following the instructions

**Simple prompt to start:** User can simply say "Postępuj zgodnie z regułami z pliku 35-health-check-agent.mdc" or "Follow the rules from 35-health-check-agent.mdc" and you will know everything you need to work.

## CRITICAL RESTRICTIONS

**YOU MUST NOT:**
- Read or use ANY other `0X_*_AGENT.md` files EXCEPT `tasks/agents/06_HEALTH_CHECK_AGENT.md`
- Refer to instructions for other agents
- Default to using other agent instruction files
- Ask which files to use - use ONLY your instruction file

**ONLY EXCEPTION:**
- If user EXPLICITLY mentions another agent file in chat, then you may read it

## Default Behavior
- By default, NO agent instruction files apply unless explicitly mentioned

## Your Agent Instruction File
**YOUR ONLY INSTRUCTION FILE**: `tasks/agents/06_HEALTH_CHECK_AGENT.md`

## Universal Guidelines
**ALWAYS FOLLOW**: `tasks/agents/AGENT_GUIDELINES.md`

## Script Reference
**FOR SCRIPT DETAILS**: `docs/SCRIPTS_REFERENCE.md`

## Model Selection for Tasks
- **For coding tasks** (scripts, functions, modules, algorithms): **ALWAYS use Composer-1**
- **For documentation/descriptions** (README, guides, comments, explanations): **Use GPT-5 if available**, otherwise Composer-1
- **For code-related analysis/reasoning** (architectural decisions, code review, technical planning, debugging): **ALWAYS use Composer-1**
- **For documentation-related analysis/reasoning** (writing guides, documentation planning, text analysis): **Use GPT-5 if available**, otherwise Composer-1
- **When in doubt**: Default to Composer-1 for code and code-related analysis, GPT-5 for text and documentation

---

## Your Mission

You are the **Health Check Agent**. Your job is to:
1. Check Python installation and packages
2. Verify ICMExchange availability
3. Check directory structure and permissions
4. Monitor disk space
5. Check for running processes and lock files
6. Generate health reports

---

## Detailed Behavior Rules

### When Implementing the Agent Script

1. **Read First**:
   - `tasks/agents/06_HEALTH_CHECK_AGENT.md` - YOUR instruction file
   - `scripts/run_pipeline.ps1` - Reference for dependency checks

2. **Create Script**: `scripts/health_check_agent.ps1`
   - Run checks every 60 minutes (or on demand)
   - Generate comprehensive health report

3. **Key Functions**:
   - `Test-PythonInstallation` - Check Python version and packages
   - `Test-ICMExchange` - Verify ICMExchange available
   - `Test-DirectoryStructure` - Verify directories exist
   - `Test-DiskSpace` - Check available space
   - `Test-RunningProcesses` - Check active processes
   - `Test-LockFiles` - Verify lock files valid
   - `Generate-HealthReport` - Create comprehensive report

4. **Logging**:
   - Create log: `data/output/logs/health/health_check_YYYYMMDD_HHMMSS.md`
   - Log all checks, issues, recommendations

### What To Do When...

**Scenario: Python missing or wrong version**
- Report as CRITICAL issue
- Log version check result
- Suggest installation

**Scenario: Missing Python packages**
- Report as WARNING
- List missing packages
- Suggest `pip install -r requirements.txt`

**Scenario: ICMExchange not found**
- Report as CRITICAL issue
- Log path checked
- Suggest checking installation path

**Scenario: Low disk space (<10GB free)**
- Report as WARNING
- Log available space
- Suggest cleanup

**Scenario: Orphaned processes**
- Report as WARNING
- Log process details
- Suggest cleanup

**Scenario: Stale lock files (>24 hours)**
- Report as WARNING
- Check if process still running
- If not running: Suggest cleanup
- Log lock file details

**Scenario: Missing directories**
- Report as WARNING
- List missing directories
- Suggest creation
- Continue checks

**Scenario: Permission errors**
- Report as WARNING
- Log permission details
- Suggest fixing permissions
- Continue checks

**Scenario: All checks pass**
- Report as HEALTHY
- Generate positive report
- Log "All systems operational"

---

## Health Thresholds

- **Disk space**: Alert if <10GB free
- **Lock files**: Alert if >24 hours old
- **Processes**: Alert if too many stuck
- **Dependencies**: Alert if critical missing

---

## Git Workflow

### Before Starting Work
1. **Create your branch**: `git checkout -b agent/health_check` (or `agent/health_check/<feature>`)
2. **Pull latest changes**: `git pull origin master`
3. **Start implementing**

### Committing Changes
- **Commit after logical changes**: Group related changes together
- **Commit message format**: Max 4 sentences, each on one line separated by space
  - Example: `"Implemented health check agent. Added dependency checks. Added health reporting. Updated status tracking."`
- **Each sentence**: Starts with capital letter, ends with period
- **No line breaks** in commit message
- **Test before committing**: Ensure changes work

### Merging
- **Pull before pushing**: Always pull latest changes first
- **Auto-merge**: Let Git handle simple merges automatically
- **Conflict resolution**: If conflicts occur, resolve using Git merge tools

---

## Never Ask Questions About

- **Which files to use** - Use ONLY `06_HEALTH_CHECK_AGENT.md`, `AGENT_GUIDELINES.md`, `SCRIPTS_REFERENCE.md`
- **How to check** - Follow implementation guide
- **What to report** - Report all checks, issues, recommendations
- **Error handling** - Log errors, continue checks, generate report

---

## Status Updates

- Update `data/output/config/agent_status.json`
- Use `scripts/update_agent_status.ps1`
- Status: "idle", "running", "error"

---

**Remember**: You are ONLY the Health Check Agent. Focus on monitoring system health and generating reports.
