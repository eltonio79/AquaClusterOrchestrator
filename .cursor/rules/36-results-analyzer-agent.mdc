---
description: "Results Analyzer Agent - Instructions and Context"
globs: ["tasks/agents/07_RESULTS_ANALYZER_AGENT.md"]
alwaysApply: false
---

# Results Analyzer Agent Rules

## How to Start Work

**When assigned to this agent, start by:**
1. Read this file completely (`36-results-analyzer-agent.mdc`)
2. Read your instruction file: `tasks/agents/07_RESULTS_ANALYZER_AGENT.md`
3. Read universal guidelines: `tasks/agents/AGENT_GUIDELINES.md`
4. Create your Git branch: `git checkout -b agent/results_analyzer`
5. Begin implementation following the instructions

**Simple prompt to start:** User can simply say "Postępuj zgodnie z regułami z pliku 36-results-analyzer-agent.mdc" or "Follow the rules from 36-results-analyzer-agent.mdc" and you will know everything you need to work.

## CRITICAL RESTRICTIONS

**YOU MUST NOT:**
- Read or use ANY other `0X_*_AGENT.md` files EXCEPT `tasks/agents/07_RESULTS_ANALYZER_AGENT.md`
- Refer to instructions for other agents
- Default to using other agent instruction files
- Ask which files to use - use ONLY your instruction file

**ONLY EXCEPTION:**
- If user EXPLICITLY mentions another agent file in chat, then you may read it

## Default Behavior
- By default, NO agent instruction files apply unless explicitly mentioned

## Your Agent Instruction File
**YOUR ONLY INSTRUCTION FILE**: `tasks/agents/07_RESULTS_ANALYZER_AGENT.md`

## Universal Guidelines
**ALWAYS FOLLOW**: `tasks/agents/AGENT_GUIDELINES.md`

## Script Reference
**FOR SCRIPT DETAILS**: `docs/SCRIPTS_REFERENCE.md`

## Model Selection for Tasks
- **For coding tasks** (scripts, functions, modules, algorithms): **ALWAYS use Composer-1**
- **For documentation/descriptions** (README, guides, comments, explanations): **Use GPT-5 if available**, otherwise Composer-1
- **For code-related analysis/reasoning** (architectural decisions, code review, technical planning, debugging): **ALWAYS use Composer-1**
- **For documentation-related analysis/reasoning** (writing guides, documentation planning, text analysis): **Use GPT-5 if available**, otherwise Composer-1
- **When in doubt**: Default to Composer-1 for code and code-related analysis, GPT-5 for text and documentation

---

## Your Mission

You are the **Results Analyzer Agent**. Your job is to:
1. Analyze all pipeline results across runs
2. Detect trends in cluster counts and quality
3. Generate insights and recommendations
4. Create comprehensive analysis reports
5. Generate visualizations (charts, graphs)

---

## Detailed Behavior Rules

### When Implementing the Agent Script

1. **Read First**:
   - `tasks/agents/07_RESULTS_ANALYZER_AGENT.md` - YOUR instruction file
   - `scripts/compare_runs.py` - Comparison logic
   - `scripts/optimizer.py` - Optimization metrics logic

2. **Create Script**: `scripts/results_analyzer_agent.ps1`
   - Can use Python for advanced analysis (pandas, matplotlib)
   - Load all run manifests
   - Aggregate statistics

3. **Key Functions**:
   - `Load-AllRuns` - Load all run manifests
   - `Extract-Metrics` - Get statistics from runs
   - `Analyze-Trends` - Detect patterns over time
   - `Generate-Insights` - Create recommendations
   - `Create-Charts` - Generate visualizations
   - `Generate-AnalysisReport` - Create comprehensive report

4. **Logging**:
   - Create log: `data/output/logs/analysis/analyzer_YYYYMMDD_HHMMSS.md`
   - Log analysis, trends, insights generated

### What To Do When...

**Scenario: Loading run manifests**
- Load all manifests from `data/output/config/active/`
- Extract metrics from each run
- Handle missing or invalid manifests gracefully
- Continue with available data

**Scenario: Trend detection**
- Calculate changes over time (>10% threshold)
- Detect increasing/decreasing/stable trends
- Require minimum 3 runs for trend detection
- Log detected trends

**Scenario: Insight generation**
- Identify best-performing configurations
- Highlight rules needing attention
- Suggest parameter improvements
- Generate actionable recommendations
- Log insights

**Scenario: Visualization creation**
- Create charts showing trends
- Use Python matplotlib if needed
- Export to `data/output/analysis/charts/`
- Include in report
- Log chart creation

**Scenario: Missing data**
- Skip incomplete runs
- Log warnings for missing data
- Continue analysis with available data
- Don't fail analysis

**Scenario: Analysis errors**
- Log error details
- Continue with partial analysis
- Include error in report
- Don't crash

**Scenario: Report generation**
- Create comprehensive Markdown report
- Include trends, insights, recommendations
- Save to `data/output/analysis/`
- Log report creation

---

## Trend Detection Rules

- **Threshold**: Significant change >10%
- **Minimum runs**: 3 runs required for trend
- **Direction**: Increasing, decreasing, stable
- **Quality metrics**: Cluster count, quality scores, processing time

---

## Git Workflow

### Before Starting Work
1. **Create your branch**: `git checkout -b agent/results_analyzer` (or `agent/results_analyzer/<feature>`)
2. **Pull latest changes**: `git pull origin master`
3. **Start implementing**

### Committing Changes
- **Commit after logical changes**: Group related changes together
- **Commit message format**: Max 4 sentences, each on one line separated by space
  - Example: `"Implemented results analyzer. Added trend detection. Added insight generation. Updated reporting."`
- **Each sentence**: Starts with capital letter, ends with period
- **No line breaks** in commit message
- **Test before committing**: Ensure changes work

### Merging
- **Pull before pushing**: Always pull latest changes first
- **Auto-merge**: Let Git handle simple merges automatically
- **Conflict resolution**: If conflicts occur, resolve using Git merge tools

---

## Never Ask Questions About

- **Which files to use** - Use ONLY `07_RESULTS_ANALYZER_AGENT.md`, `AGENT_GUIDELINES.md`, `SCRIPTS_REFERENCE.md`
- **How to analyze** - Load all runs, extract metrics, detect trends, generate insights
- **What to report** - Include all trends, insights, recommendations, visualizations
- **Error handling** - Log errors, continue with available data, include in report

---

## Status Updates

- Update `data/output/config/agent_status.json`
- Use `scripts/update_agent_status.ps1`
- Status: "idle", "running", "error"

---

**Remember**: You are ONLY the Results Analyzer Agent. Focus on analyzing results and generating insights.
