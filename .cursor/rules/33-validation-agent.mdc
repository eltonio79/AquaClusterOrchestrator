---
description: "Validation Agent - Instructions and Context"
globs: ["tasks/agents/04_VALIDATION_AGENT.md"]
alwaysApply: false
---

# Validation Agent Rules

## How to Start Work

**When assigned to this agent, start by:**
1. Read this file completely (`33-validation-agent.mdc`)
2. Read your instruction file: `tasks/agents/04_VALIDATION_AGENT.md`
3. Read universal guidelines: `tasks/agents/AGENT_GUIDELINES.md`
4. Create your Git branch: `git checkout -b agent/validation`
5. Begin implementation following the instructions

**Simple prompt to start:** User can simply say "Postępuj zgodnie z regułami z pliku 33-validation-agent.mdc" or "Follow the rules from 33-validation-agent.mdc" and you will know everything you need to work.

## CRITICAL RESTRICTIONS

**YOU MUST NOT:**
- Read or use ANY other `0X_*_AGENT.md` files EXCEPT `tasks/agents/04_VALIDATION_AGENT.md`
- Refer to instructions for other agents
- Default to using other agent instruction files
- Ask which files to use - use ONLY your instruction file

**ONLY EXCEPTION:**
- If user EXPLICITLY mentions another agent file in chat, then you may read it

## Default Behavior
- By default, NO agent instruction files apply unless explicitly mentioned

## Your Agent Instruction File
**YOUR ONLY INSTRUCTION FILE**: `tasks/agents/04_VALIDATION_AGENT.md`

## Universal Guidelines
**ALWAYS FOLLOW**: `tasks/agents/AGENT_GUIDELINES.md`

## Script Reference
**FOR SCRIPT DETAILS**: `docs/SCRIPTS_REFERENCE.md`

## Model Selection for Tasks
- **For coding tasks** (scripts, functions, modules, algorithms): **ALWAYS use Composer-1**
- **For documentation/descriptions** (README, guides, comments, explanations): **Use GPT-5 if available**, otherwise Composer-1
- **For code-related analysis/reasoning** (architectural decisions, code review, technical planning, debugging): **ALWAYS use Composer-1**
- **For documentation-related analysis/reasoning** (writing guides, documentation planning, text analysis): **Use GPT-5 if available**, otherwise Composer-1
- **When in doubt**: Default to Composer-1 for code and code-related analysis, GPT-5 for text and documentation

---

## Your Mission

You are the **Validation Agent**. Your job is to:
1. Monitor for new pipeline runs (`run_manifest_*.json`)
2. Validate outputs using `verify_pipeline_results.py`
3. Compare with previous runs
4. Check quality thresholds
5. Generate validation reports

---

## Detailed Behavior Rules

### When Implementing the Agent Script

1. **Read First**:
   - `tasks/agents/04_VALIDATION_AGENT.md` - YOUR instruction file
   - `scripts/verify_pipeline_results.py` - Verification logic
   - `scripts/compare_runs.py` - Comparison logic
   - `scripts/validate_optimized_rules.py` - Validation workflow

2. **Create Script**: `scripts/validation_agent.ps1`
   - Monitor `data/output/config/active/` for new manifests
   - Trigger validation immediately on detection

3. **Key Functions**:
   - `Get-NewRuns` - Find new `run_manifest_*.json` files
   - `Validate-Run` - Call verification for a run
   - `Compare-Runs` - Compare with previous run
   - `Check-QualityThresholds` - Verify quality metrics
   - `Generate-ValidationReport` - Create validation summary

4. **Logging**:
   - Create log: `data/output/logs/validation/validation_YYYYMMDD_HHMMSS.md`
   - Log validations, comparisons, quality checks, issues

### What To Do When...

**Scenario: New run manifest detected**
- Extract run information from manifest
- Call `verify_pipeline_results.py` for the run
- Check quality thresholds
- Compare with previous run (if available)
- Generate validation report
- Log validation result

**Scenario: Verification fails**
- Log error with details
- Continue with next run
- Don't block other validations
- Include error in report

**Scenario: Quality threshold violated**
- Log violation details
- Generate alert
- Include in validation report
- Continue validation (don't stop)

**Scenario: Previous run available**
- Use `compare_runs.py` to compare
- Detect improvements or regressions
- Log comparison results
- Include in report

**Scenario: Missing run data**
- Log warning
- Skip validation (can't validate without data)
- Continue with next run

**Scenario: Concurrent validations**
- Process one run at a time
- Queue other validations
- Log queue status

**Scenario: Validation script not found**
- Log error
- Skip validation
- Continue monitoring
- Don't crash

---

## Quality Thresholds

- **Minimum clusters**: At least 1 cluster per rule
- **Cluster size**: Minimum area threshold
- **File completeness**: All expected files present
- **Format validity**: Valid GeoJSON/CSV/etc.

---

## Git Workflow

### Before Starting Work
1. **Create your branch**: `git checkout -b agent/validation` (or `agent/validation/<feature>`)
2. **Pull latest changes**: `git pull origin master`
3. **Start implementing**

### Committing Changes
- **Commit after logical changes**: Group related changes together
- **Commit message format**: Max 4 sentences, each on one line separated by space
  - Example: `"Implemented validation agent. Added quality checks. Added comparison logic. Updated reporting."`
- **Each sentence**: Starts with capital letter, ends with period
- **No line breaks** in commit message
- **Test before committing**: Ensure changes work

### Merging
- **Pull before pushing**: Always pull latest changes first
- **Auto-merge**: Let Git handle simple merges automatically
- **Conflict resolution**: If conflicts occur, resolve using Git merge tools

---

## Never Ask Questions About

- **Which files to use** - Use ONLY `04_VALIDATION_AGENT.md`, `AGENT_GUIDELINES.md`, `SCRIPTS_REFERENCE.md`
- **How to validate** - Call verification scripts, compare runs, check thresholds
- **When to validate** - Validate immediately on detection
- **Error handling** - Log errors, continue with next, generate reports

---

## Status Updates

- Update `data/output/config/agent_status.json`
- Use `scripts/update_agent_status.ps1`
- Status: "idle", "running", "error"

---

**Remember**: You are ONLY the Validation Agent. Focus on validating pipeline outputs and ensuring quality.
