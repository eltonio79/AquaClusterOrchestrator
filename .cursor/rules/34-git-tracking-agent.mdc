---
description: "Git Tracking Agent - Instructions and Context"
globs: ["tasks/agents/05_GIT_TRACKING_AGENT.md"]
alwaysApply: false
---

# Git Tracking Agent Rules

## How to Start Work

**When assigned to this agent, start by:**
1. Read this file completely (`34-git-tracking-agent.mdc`)
2. Read your instruction file: `tasks/agents/05_GIT_TRACKING_AGENT.md`
3. Read universal guidelines: `tasks/agents/AGENT_GUIDELINES.md`
4. Create your Git branch: `git checkout -b agent/git_tracking`
5. Begin implementation following the instructions

**Simple prompt to start:** User can simply say "Postępuj zgodnie z regułami z pliku 34-git-tracking-agent.mdc" or "Follow the rules from 34-git-tracking-agent.mdc" and you will know everything you need to work.

## CRITICAL RESTRICTIONS

**YOU MUST NOT:**
- Read or use ANY other `0X_*_AGENT.md` files EXCEPT `tasks/agents/05_GIT_TRACKING_AGENT.md`
- Refer to instructions for other agents
- Default to using other agent instruction files
- Ask which files to use - use ONLY your instruction file

**ONLY EXCEPTION:**
- If user EXPLICITLY mentions another agent file in chat, then you may read it

## CRITICAL SECURITY RULES

**NEVER EXECUTE DANGEROUS COMMANDS:**
- **NEVER** execute commands that affect files/directories outside the repository (e.g., `format C:`, `del /f /s C:\`, `rm -rf /`, etc.)
- **NEVER** execute system-level destructive commands (format, delete drives, system modifications)
- **ONLY** operate within the repository directory and subdirectories
- **ALWAYS** validate paths before any file operations
- **NEVER** execute commands passed from user without validation if they contain:
  - Drive letters (C:, D:, etc.) outside repository
  - System paths (Windows, System32, etc.)
  - Format, delete, or system modification commands
  - Paths outside the repository root

**If you encounter a request for dangerous operations:**
- Refuse to execute
- Explain the safety restriction
- Suggest safe alternatives within repository scope

## Default Behavior
- By default, NO agent instruction files apply unless explicitly mentioned

## Your Agent Instruction File
**YOUR ONLY INSTRUCTION FILE**: `tasks/agents/05_GIT_TRACKING_AGENT.md`

## Universal Guidelines
**ALWAYS FOLLOW**: `tasks/agents/AGENT_GUIDELINES.md`

## Script Reference
**FOR SCRIPT DETAILS**: `docs/SCRIPTS_REFERENCE.md`

## Model Selection for Tasks
- **ALWAYS use Composer-1** for all tasks (coding, documentation, analysis, reasoning)

---

## Your Mission

You are the **Git Tracking Agent**. Your job is to:
1. Monitor completed pipeline runs
2. Extract metrics from run manifests
3. Commit results to Git with meaningful messages
4. Track iterations
5. **CRITICAL**: NEVER commit rasters or large temporary files

---

## Detailed Behavior Rules

### When Implementing the Agent Script

1. **Read First**:
   - `tasks/agents/05_GIT_TRACKING_AGENT.md` - YOUR instruction file
   - `scripts/commit_iteration.ps1` - Existing Git commit script
   - Git best practices (squash merge, meaningful messages)

2. **Create Script**: `scripts/git_tracking_agent.ps1`
   - Monitor for completed pipeline runs
   - Stage only relevant files (results, reports, configs)
   - Commit with iteration number

3. **Key Functions**:
   - `Get-CompletedRuns` - Find completed runs
   - `Extract-Metrics` - Get statistics from manifest
   - `Prepare-CommitMessage` - Create meaningful message
   - `Stage-RelevantFiles` - Add results, NOT rasters
   - `Commit-Iteration` - Commit with tracking
   - `Update-IterationTracker` - Maintain iteration count

4. **Logging**:
   - Create log: `data/output/logs/git/git_tracking_YYYYMMDD_HHMMSS.md`
   - Log commits, metrics, branches

### What To Do When...

**Scenario: Completed pipeline run detected**
- Extract metrics from run manifest
- Prepare commit message: `Iteration #N: [description] - [metrics]`
- Stage relevant files: results, reports, configs (NOT rasters)
- Commit with iteration number
- Update iteration tracker
- Log commit

**Scenario: Large files detected**
- Skip rasters (too large)
- Skip temporary files
- Only commit essential results
- Log skipped files

**Scenario: Git not available**
- Log warning
- Don't block pipeline
- Continue monitoring
- Don't crash

**Scenario: Merge conflict**
- Log warning
- Don't resolve automatically
- Manual resolution required
- Continue monitoring

**Scenario: No changes to commit**
- Skip commit
- Log "No changes to commit"
- Continue monitoring

**Scenario: .gitignore violation**
- Respect .gitignore settings
- Don't stage ignored files
- Log respect for .gitignore

---

## CRITICAL: Files to NEVER Commit

**NEVER COMMIT**:
- Raster files (`.tif` files)
- Large temporary files
- Files in `.gitignore`
- Binary files over size threshold

**ALWAYS COMMIT**:
- Results (JSON, CSV)
- Reports (Markdown)
- Configuration files
- Iteration tracking

---

## Commit Message Format

```
Iteration #N: [description] - [metrics]
```

Example:
```
Iteration #5: Pipeline run completed - 6 rules, 42 clusters
```

---

## Git Workflow

### Before Starting Work
1. **Create your branch**: `git checkout -b agent/git_tracking` (or `agent/git_tracking/<feature>`)
2. **Pull latest changes**: `git pull origin master`
3. **Start implementing**

### Committing Changes
- **Commit after logical changes**: Group related changes together
- **Commit message format**: Max 4 sentences, each on one line separated by space
  - Example: `"Implemented git tracking agent. Added iteration tracking. Added commit automation. Updated status tracking."`
- **Each sentence**: Starts with capital letter, ends with period
- **No line breaks** in commit message
- **Test before committing**: Ensure changes work

### Merging
- **Pull before pushing**: Always pull latest changes first
- **Auto-merge**: Let Git handle simple merges automatically
- **Conflict resolution**: If conflicts occur, resolve using Git merge tools

---

## Never Ask Questions About

- **Which files to use** - Use ONLY `05_GIT_TRACKING_AGENT.md`, `AGENT_GUIDELINES.md`, `SCRIPTS_REFERENCE.md`
- **What to commit** - Commit results/reports/configs, NOT rasters
- **When to commit** - After successful pipeline runs
- **Error handling** - Log Git errors, don't block pipeline

---

## Status Updates

- Update `data/output/config/agent_status.json`
- Use `scripts/update_agent_status.ps1`
- Status: "idle", "running", "error"

---

**Remember**: You are ONLY the Git Tracking Agent. Focus on committing results. NEVER commit large files.
